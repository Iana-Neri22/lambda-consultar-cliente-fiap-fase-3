name: pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: ‚òÅÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: Debug Workflow Context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Workflow run number: ${{ github.run_number }}"
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.MYSQL_HOST }}" ]; then
            echo "MYSQL_HOST is set"
          else
            echo "MYSQL_HOST is not set"
          fi
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is set"
          else
            echo "AWS_ACCESS_KEY_ID is not set"
          fi

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install dependencies
        run: make install

      - name: Debug Secrets
        run: |
          echo "Checking if secrets are available..."
          if [ -n "${{ secrets.MYSQL_HOST }}" ]; then
            echo "MYSQL_HOST is set"
          else
            echo "MYSQL_HOST is not set"
          fi
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is set"
          else
            echo "AWS_ACCESS_KEY_ID is not set"
          fi

      - name: üîç Run tests
        run: make test
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_POOL_SIZE: ${{ secrets.MYSQL_POOL_SIZE }}

  deploy_layer:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: ‚òÅÔ∏è Checkout repository
        uses: actions/checkout@v3
        
      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: üì¶ Install dependencies for layer
        run: |
          mkdir -p python
          pip install -r requirements.txt -t python/
          
      - name: üì¶ Create layer zip
        run: zip -r layer.zip python/
        
      - name: üöÄ Deploy layer using AWS CLI
        run: |
          aws lambda publish-layer-version \
            --layer-name FiapLanchoneteAuthorizer-dependencies \
            --zip-file fileb://layer.zip \
            --compatible-runtimes python3.11 \
            --query 'Version' \
            --output text
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1

  deploy:
    needs: deploy_layer
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: ‚òÅÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üü¢ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üì¶ Install npm dependencies
        run: npm install

      - name: üì¶ Install Python dependencies
        run: make install

      - name: üöÄ Deploy using Serverless
        run: make deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

          
